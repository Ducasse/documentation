it turns out it only takes 3 methods and some boilerplate code that is mostly auto generated.

!! Subclass of ComposableModel

 Make a subclass of ComposableModel with instance variables for the UI elements that we need

[[[
ComposableModel subclass: #LoginModel
  instanceVariableNames: 'usernameLabel usernameField passwordLabel passwordField'
  classVariableNames: ''
  category: '_UnpackagedPackage'
]]]

!! UI Layout

 Specify the layout of the UI

[[[
LoginModel class>>#defaultSpec
  <spec: #default>

  ^ SpecLayout composed
      newColumn: [ :col |
        col 
          newRow: [ :row | 
            row 
              add: #usernameLabel width: 80; 
              add: #usernameField ]
          height: self inputTextHeight;
          newRow: [ :row | 
            row 
              add: #passwordLabel width: 80; 
              add: #passwordField ]
          height: self inputTextHeight ];
       yourself
]]]

!! Build the UI elements

[[[
LoginModel>>#initializeWidgets
  usernameLabel := self newLabel.
  usernameLabel text: 'Username'.
  usernameField := self newTextInput.
  usernameField autoAccept: true; ghostText: 'john@acme.com'.
  passwordLabel := self newLabel.
  passwordLabel text: 'Password'; yourself.
  passwordField := self newTextInput.
  passwordField beEncrypted; autoAccept: true; ghostText: '******'.
  self focusOrder add: usernameField; add: passwordField
]]]


!! Open the UI as modal dialog

[[[
LoginModel class>>#getCredentials
  "self getCredentials"
	
  | login dialog |
  login := self new.
  dialog := login openDialogWithSpec.
  dialog modalRelativeTo: self currentWorld.
  dialog cancelled ifTrue: [ ^ nil ].
  ^ login credentials
]]]

!! Some boilerplate code

Auto-generate read accessors for the 4 instance variables.

[[[
LoginModel>>#title
  ^ 'Login'

LoginModel>>#initialExtent
  ^ 350 @ 150

LoginModel>>#credentials
  ^ usernameField text -> passwordField text
]]]



